var documenterSearchIndex = {"docs":
[{"location":"#","page":"Home","title":"Home","text":"CurrentModule = AML","category":"page"},{"location":"#AML-1","page":"Home","title":"AML","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"AML web development package in Julia","category":"page"},{"location":"#","page":"Home","title":"Home","text":"It automatically creates/extracts HTML/XML files from Julia types!","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Add the package","category":"page"},{"location":"#","page":"Home","title":"Home","text":"]add https://github.com/aminya/AML.jl","category":"page"},{"location":"#Usage-1","page":"Home","title":"Usage","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Use the package:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"using AML","category":"page"},{"location":"#Main-macro-and-I/O-1","page":"Home","title":"Main macro and I/O","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Modules = [AML]\nPages   = [\"AML.jl\"]","category":"page"},{"location":"#EzXML.parsehtml","page":"Home","title":"EzXML.parsehtml","text":"parsehtml(htmlstring)\n\nParse htmlstring and create an HTML document.\n\n\n\n\n\n\n\n","category":"function"},{"location":"#EzXML.parsexml","page":"Home","title":"EzXML.parsexml","text":"parsexml(xmlstring)\n\nParse xmlstring and create an XML document.\n\n\n\n\n\n\n\n","category":"function"},{"location":"#EzXML.readhtml","page":"Home","title":"EzXML.readhtml","text":"readhtml(filename)\n\nRead filename and create an HTML document.\n\n\n\n\n\nreadhtml(input::IO)\n\nRead input and create an HTML document.\n\n\n\n\n\n\n\n","category":"function"},{"location":"#EzXML.readxml","page":"Home","title":"EzXML.readxml","text":"readxml(filename)\n\nRead filename and create an XML document.\n\n\n\n\n\nreadxml(input::IO)\n\nRead input and create an XML document.\n\n\n\n\n\n\n\n","category":"function"},{"location":"#AML.@aml-Tuple{Any}","page":"Home","title":"AML.@aml","text":"@aml typedef\n\nUse @aml macro to define a Julia type, and then the package automatically creates a xml or html associated with the defined type.\n\nType defnition\n\nUse xd\"\" or hd\"\" to define a XML or HTML document:\n\n@aml struct Doc xd\"\"\n\nSpecify the element name in a string after the struct name\n\n@aml struct Person \"person\"\n\nSepecify the html/xml name for childs in a string in front of the field after ,\n\nage::UInt, \"age\"\n\nFor already @aml defined types, name should be the same as its html/xml name\n\nuniversity::University, \"university\"\n\nIf the value is going to be an attribute put a before its name\n\nID::Int64, a\"id\"\n\nYou can specify the default value for an argument by using = defVal syntax\n\nGPA::Float64 = 4.5, \"GPA\"\n\nExample 1 - constructor\n\nusing AML\n\n@aml struct Person \"person\"\n    age::UInt, \"age\"\n    field::String, \"study-field\"\n    GPA::Float64 = 4.5, \"GPA\"\n    courses::Vector{String}, \"taken-courses\"\n    ID::Int64, a\"id\"\nend\n\n@aml struct University \"university\"\n    name, a\"university-name\"\n    people::Vector{Person}, \"person\"\nend\n\n@aml struct Doc xd\"\"\n    university::University, \"university\"\nend\n\n\nP1 = Person(age=24, field=\"Mechanical Engineering\", courses=[\"Artificial Intelligence\", \"Robotics\"], ID = 1)\nP2 = Person(age=18, field=\"Computer Engineering\", GPA=4, courses=[\"Julia\"], ID = 2)\n\nU = University(name=\"Julia University\", people=[P1, P2])\n\nD = Doc(university = U)\n\njulia> print(P1.aml)\n<person id=\"1\">\n  <age>24</age>\n  <study-field>Mechanical Engineering</study-field>\n  <GPA>4.5</GPA>\n  <taken-courses>Artificial Intelligence</taken-courses>\n  <taken-courses>Robotics</taken-courses>\n</person>\n\njulia> print(P2.aml)\n<person id=\"2\">\n  <age>18</age>\n  <study-field>Computer Engineering</study-field>\n  <GPA>4</GPA>\n  <taken-courses>Julia</taken-courses>\n</person>\n\njulia> print(U.aml)\n<university university-name=\"Julia University\">\n  <person id=\"1\">\n    <age>24</age>\n    <study-field>Mechanical Engineering</study-field>\n    <GPA>4.5</GPA>\n    <taken-courses>Artificial Intelligence</taken-courses>\n    <taken-courses>Robotics</taken-courses>\n  </person>\n  <person id=\"2\">\n    <age>18</age>\n    <study-field>Computer Engineering</study-field>\n    <GPA>4</GPA>\n    <taken-courses>Julia</taken-courses>\n  </person>\n</university>\n\njulia> print(D.aml)\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n<university university-name=\"Julia University\">\n  <person id=\"1\">\n    <age>24</age>\n    <study-field>Mechanical Engineering</study-field>\n    <GPA>4.5</GPA>\n    <taken-courses>Artificial Intelligence</taken-courses>\n    <taken-courses>Robotics</taken-courses>\n  </person>\n  <person id=\"2\">\n    <age>18</age>\n    <study-field>Computer Engineering</study-field>\n    <GPA>4</GPA>\n    <taken-courses>Julia</taken-courses>\n  </person>\n</university>\n\n\nExample 2 - extractor\n\nusing AML\n\nxml = parsexml(\"\"\"\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n<university university-name=\"Julia University\">\n  <person id=\"1\">\n    <age>24</age>\n    <study-field>Mechanical Engineering</study-field>\n    <GPA>4.5</GPA>\n    <taken-courses>Artificial Intelligence</taken-courses>\n    <taken-courses>Robotics</taken-courses>\n  </person>\n  <person id=\"2\">\n    <age>18</age>\n    <study-field>Computer Engineering</study-field>\n    <GPA>4</GPA>\n    <taken-courses>Julia</taken-courses>\n  </person>\n</university>\n\"\"\")\n\n@aml struct Person \"person\"\n    age::UInt, \"age\"\n    field::String, \"study-field\"\n    GPA::Float64 = 4.5, \"GPA\"\n    courses::Vector{String}, \"taken-courses\"\n    ID::Int64, a\"id\"\nend\n\n@aml struct University \"university\"\n    name, a\"university-name\"\n    people::Vector{Person}, \"person\"\nend\n\n@aml struct Doc xd\"\"\n    university::University, \"university\"\nend\n\n# extract Doc\n\nD = Doc(xml)\n\n\n# extract University\n\nU = University(D.university)\n\njulia>U.name\n\"Julia University\"\n\n# extract Person\n\nP1 = Person(U.people[1])\n\njulia>P1.age\n24\n\njulia>P1.field\nMechanical Engineering\n\njulia>P1.GPA\n4.5\n\njulia>P1.courses\n[\"Artificial Intelligence\", \"Robotics\"]\n\njulia>P1.ID\n1\n\nP2 = Person(U.people[2])\n\n\n\n\n\n\n","category":"macro"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Backend-utilities-1","page":"Home","title":"Backend utilities","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Modules = [AML]\nPages   = [\"utilities.jl\"]","category":"page"},{"location":"#AML.findallcontent-Union{Tuple{T}, Tuple{Type{Array{T,1}},String,Union{Document, Node},Int64}} where T<:Union{Nothing, String}","page":"Home","title":"AML.findallcontent","text":"findallcontent(type, string, node)\n\nFinds all the elements with the address of string in the node, and converts the elements to Type object.\n\n\n\n\n\n","category":"method"},{"location":"#AML.findalllocal-Tuple{String,Union{Document, Node}}","page":"Home","title":"AML.findalllocal","text":"findalllocal(s,node)\n\nfindalllocal with ignoring namespaces. It considers element.name for returning the elements\n\n\n\n\n\n","category":"method"},{"location":"#AML.findfirstcontent-Union{Tuple{T}, Tuple{Type{T},String,Union{Document, Node},Int64}} where T<:Union{Nothing, String}","page":"Home","title":"AML.findfirstcontent","text":"findfirstcontent(element,node)\nfindfirstcontent(type,element,node)\n\nReturns first element content. It also convert to the desired format by passing type. element is given as string.\n\nfindfirstcontent(\"/instrument-name\",node)\nfindfirstcontent(UInt8,\"/midi-channel\",node)\n\n\n\n\n\n","category":"method"},{"location":"#AML.findfirstlocal-Tuple{String,Union{Document, Node}}","page":"Home","title":"AML.findfirstlocal","text":"findfirstlocal(s, node)\n\nfindfirst with ignoring namespaces. It considers element.name for returning the elements\n\n\n\n\n\n","category":"method"}]
}
